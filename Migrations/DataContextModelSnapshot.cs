// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnet_bugtrackerapi.Data;

namespace dotnet_bugtrackerapi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8");

            modelBuilder.Entity("dotnet_bugtrackerapi.Models.Breakage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BreakageReason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Breakages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BreakageReason = "Timeout Exception",
                            Date = new DateTime(2020, 9, 27, 18, 3, 7, 550, DateTimeKind.Local).AddTicks(806),
                            TestId = 1
                        },
                        new
                        {
                            Id = 2,
                            BreakageReason = "Stale Element Exception",
                            Date = new DateTime(2020, 9, 27, 18, 3, 7, 550, DateTimeKind.Local).AddTicks(1690),
                            TestId = 1
                        },
                        new
                        {
                            Id = 3,
                            BreakageReason = "Stale Element Exception",
                            Date = new DateTime(2020, 9, 27, 18, 3, 7, 550, DateTimeKind.Local).AddTicks(1730),
                            TestId = 1
                        });
                });

            modelBuilder.Entity("dotnet_bugtrackerapi.Models.Fix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BreakageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("HowFixed")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BreakageId")
                        .IsUnique();

                    b.ToTable("Fixes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BreakageId = 1,
                            Date = new DateTime(2020, 9, 27, 18, 3, 7, 545, DateTimeKind.Local).AddTicks(6089),
                            HowFixed = "Added wait"
                        },
                        new
                        {
                            Id = 2,
                            BreakageId = 2,
                            Date = new DateTime(2020, 9, 27, 18, 3, 7, 548, DateTimeKind.Local).AddTicks(9753),
                            HowFixed = "Updated CSS Selector"
                        });
                });

            modelBuilder.Entity("dotnet_bugtrackerapi.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBroken")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsBroken = true,
                            Name = "Test A"
                        });
                });

            modelBuilder.Entity("dotnet_bugtrackerapi.Models.Breakage", b =>
                {
                    b.HasOne("dotnet_bugtrackerapi.Models.Test", "Test")
                        .WithMany("Breakages")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dotnet_bugtrackerapi.Models.Fix", b =>
                {
                    b.HasOne("dotnet_bugtrackerapi.Models.Breakage", "Breakage")
                        .WithOne("Fix")
                        .HasForeignKey("dotnet_bugtrackerapi.Models.Fix", "BreakageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
